spring.main.allow-bean-definition-overriding=true
server.port=8082
spring.application.name=SoftenoJpaPostgresApp

### custom: external services
#com.softeno.external.url=http://localhost:4500/sample
#com.softeno.external.url=http://localhost:8080/sample
com.softeno.external.url=http://localhost:8080/sample-secured
com.softeno.external.name=node-service

com.softeno.kafka.tx=sample_topic_2
com.softeno.kafka.rx=sample_topic_2
com.softeno.kafka.keycloak=keycloak-events

### r2dbc
spring.r2dbc.url=r2dbc:postgresql://localhost:5432/application
spring.r2dbc.username=admin
spring.r2dbc.password=admin

spring.liquibase.enabled=true
spring.liquibase.change-log=classpath:db/db.changelog.yml
spring.liquibase.url=jdbc:postgresql://localhost:5432/application
spring.liquibase.user=admin
spring.liquibase.password=admin

logging.level.io.r2dbc=DEBUG
logging.level.org.springframework.data=DEBUG
logging.level.org.springframework.r2dbc=TRACE
logging.level.liquibase=DEBUG

### keycloak realm config: http://localhost:8090/realms/master/.well-known/openid-configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8090/realms/master
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8090/realms/master/protocol/openid-connect/certs
spring.security.oauth2.client.registration.keycloak.client-id=backend
spring.security.oauth2.client.registration.keycloak.client-secret=Jtn7eBkt5hU4E6oNy7iQ2YJPQR8po5oY
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=client_credentials
spring.security.oauth2.client.provider.keycloak.authorization-uri=http://localhost:8090/realms/master/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:8090/realms/master/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-uri=http://localhost:8090/realms/master/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=http://localhost:8090/realms/master/protocol/openid-connect/certs

# kafka
spring.kafka.bootstrap-servers=localhost:9094
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.group-id=other-group-jvm
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.use.type.headers=false
spring.kafka.consumer.properties.spring.json.value.default.type=com.fasterxml.jackson.databind.JsonNode

# metrics, prometheus & actuator
management.endpoints.web.base-path=/actuator
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true

# swagger
springdoc.api-docs.enabled=true
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

# resilience4j
resilience4j.circuitbreaker.metrics.enabled=true
resilience4j.retry.metrics.enabled=true
resilience4j.ratelimiter.metrics.enabled=true

## observation & zipkin
management.tracing.enabled=true
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.sampling.probability=1.0
management.tracing.propagation.consume=b3
management.tracing.propagation.produce=b3
management.tracing.propagation.type=b3

spring.kafka.template.observation-enabled=true
spring.kafka.listener.observation-enabled=true
management.tracing.baggage.correlation.enabled=true
management.tracing.baggage.enabled=true
management.tracing.baggage.correlation.fields=spanId,traceId

management.otlp.metrics.export.enabled=true
